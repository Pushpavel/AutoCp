# GitHub Actions Workflow created for testing and preparing the plugin release in following steps:
# - compute properties
# - validate Gradle Wrapper,
# - run 'test' task,
# - run 'runPluginVerifier' task,
# - run 'buildPlugin' task and prepare artifact for the further tests,
# - create a release.
#
# Workflow is triggered on push and pull_request events.
#
# Docs:
# - GitHub Actions: https://help.github.com/en/actions
# - IntelliJ Plugin Verifier GitHub Action: https://github.com/ChrisCarini/intellij-platform-plugin-verifier-action

name: Build
on:
  push:
  pull_request:
jobs:

  # Compute Properties for other jobs to use
  properties:
    name: Compute Properties
    runs-on: ubuntu-latest
    outputs:
      shouldRelease: ${{ steps._properties.outputs.shouldRelease == 'true' && github.ref == 'refs/heads/main' }}
      shouldVerify: ${{ ((steps._properties.outputs.shouldRelease == 'true' && github.ref == 'refs/heads/main') || github.event_name == 'pull_request') && steps._properties.outputs.skipVerify == 'false' }}
    steps:
      # Set environment variables
      # fixme: what if [release][no verify] at same commit
      - name: Export Properties
        id: _properties
        shell: bash
        run: |
          SKIP_VERIFY="$(echo '${{ github.event.head_commit.message }}' | grep -Eq "\[\s*(skip|no)\s+verify\s*\]" && echo 'true' || echo 'false' )"
          SHOULD_RELEASE="$(echo '${{ github.event.head_commit.message }}' | grep -Eq "\[\s*release\s*\]" && echo 'true' || echo 'false' )"

          echo "::set-output name=skipVerify::$SKIP_VERIFY"
          echo "::set-output name=shouldRelease::$SHOULD_RELEASE"


  # Run Gradle Wrapper Validation Action to verify the wrapper's checksum
  gradleValidation:
    name: Gradle Wrapper
    runs-on: ubuntu-latest
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2.3.5

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.0.3

  # Run test Gradle tasks
  test:
    name: Test
    needs: gradleValidation
    runs-on: ubuntu-latest
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2.3.5

      # Setup Java 11 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: 11
          cache: gradle

      # Run tests
      - name: Run Tests
        run: ./gradlew test

      # Collect Tests Result of failed tests
      - name: Collect Tests Result
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: tests-result
          path: ${{ github.workspace }}/build/reports/tests

  # Verify plugin using IntelliJ Plugin Verifier tool only on pull_requests as it takes a long time
  verify:
    name: Verify
    if: needs.properties.outputs.shouldVerify == 'true'
    needs: [ properties, gradleValidation ]
    runs-on: ubuntu-latest
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2.3.5

      # Setup Java 11 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: 11
          cache: gradle

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          echo "::set-output name=pluginVerifierHomeDir::~/.pluginVerifier"
          ./gradlew listProductsReleases # prepare list of IDEs for Plugin Verifier

      # Cache Plugin Verifier IDEs
      - name: Setup Plugin Verifier IDEs Cache
        uses: actions/cache@v2.1.6
        with:
          path: ${{ steps.properties.outputs.pluginVerifierHomeDir }}/ides
          key: plugin-verifier-${{ hashFiles('build/listProductsReleases.txt') }}

      # Run Verify Plugin task and IntelliJ Plugin Verifier tool
      - name: Run Plugin Verification tasks
        run: ./gradlew runPluginVerifier -Pplugin.verifier.home.dir=${{ steps.properties.outputs.pluginVerifierHomeDir }}

      # Collect Plugin Verifier Result
      - name: Collect Plugin Verifier Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/build/reports/pluginVerifier

  # Build plugin and provide the artifact for the next workflow jobs
  build:
    name: Build
    needs: [ properties, gradleValidation ]
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps._properties.outputs.name }}
      version: ${{ steps._properties.outputs.version }}
      changelog: ${{ steps._properties.outputs.changelog }}
      prerelease: ${{ contains(steps._properties.outputs.version,'-eap') }}
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2.3.4

      # Setup Java 11 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: 11
          cache: gradle

      # insert Analytics secrets
      - name: Applying Analytics Secrets
        run: |
          echo "analytics_api_secrets=${{ secrets.ANALYTICS_API_SECRETS }}" > src/main/resources/messages/secrets.properties
          echo "analytics_measurement_id=${{ secrets.ANALYTICS_MEASUREMENT_ID }}" >> src/main/resources/messages/secrets.properties

      # Build artifact using buildPlugin Gradle task
      - name: Build Plugin
        run: ./gradlew buildPlugin

      # Set environment variables
      - name: Export Properties
        if: needs.properties.outputs.shouldRelease == 'true'
        id: _properties
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
          NAME="$(echo "$PROPERTIES" | grep "^pluginName:" | cut -f2- -d ' ')"
          CHANGELOG="$(./gradlew getChangelog --unreleased --no-header --console=plain -q)"
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"

          echo "::set-output name=version::$VERSION"
          echo "::set-output name=name::$NAME"
          echo "::set-output name=changelog::$CHANGELOG"

      # Prepare plugin archive content for creating artifact
      - name: Prepare Plugin Artifact
        if: needs.properties.outputs.shouldRelease == 'true'
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/build/distributions
          FILENAME=`ls *.zip`
          unzip "$FILENAME" -d content

          echo "::set-output name=filename::$FILENAME"

      # Store already-built plugin as an artifact for downloading
      - name: Upload artifact
        if: needs.properties.outputs.shouldRelease == 'true'
        uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*


  # Publish a release for GitHub Releases page which in turn triggers release workflow
  release:
    name: Release
    if: needs.properties.outputs.shouldRelease == 'true'
    needs: [ properties, build, verify, test ]
    concurrency:
      group: release
      cancel-in-progress: true
    runs-on: ubuntu-latest
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2.3.5

      # Create new release
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ needs.build.outputs.version }} \
            ${{ (needs.build.outputs.prerelease == 'true') && '--prerelease ' || '' }} \
            --title "${{ needs.build.outputs.version }}" \
            --notes "$(cat << 'EOM'
          ${{ needs.build.outputs.changelog }}
          EOM
          )"